// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime? @map("email_verified")
    image         String?

    points    Int      @default(0)
    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    accounts Account[]
    sessions Session[]

    quizSubmissions QuizSubmission[]

    rewards        Reward[]
    redeemedOffers Offer[]

    @@map(name: "users")
}

model Blog {
    id     String @id @default(cuid())
    title  String
    body   String
    author String
    banner String

    points Int      @default(2) @db.SmallInt
    views  Int      @default(0)
    tags   String[]
    likes  String[] @default([])

    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    @@map(name: "blogs")
}

model Video {
    id          String @id @default(cuid())
    url         String
    title       String
    description String
    thumbnail   String

    points Int      @default(5) @db.SmallInt
    views  Int      @default(0)
    tags   String[]
    likes  String[] @default([])

    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    @@map(name: "videos")
}

model Question {
    id       String   @id @default(cuid())
    question String
    options  String[]
    multiple Boolean?
    answers  Int[]

    quizzes Quiz[]
}

model Quiz {
    id          String     @id @default(cuid())
    title       String
    description String
    questions   Question[]

    points Int      @default(5) @db.SmallInt
    views  Int      @default(0)
    tags   String[]
    likes  String[] @default([])

    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    submissions QuizSubmission[]

    @@map(name: "quizzes")
}

model QuizSubmission {
    id String @id @default(cuid())

    answers String // Stringified JSON, Mapping<QuestionId, SelectedAnswersIndex>

    createdAt DateTime @default(now()) @map(name: "created_at")

    quiz   Quiz   @relation(fields: [quizId], references: [id])
    quizId String @map("quiz_id")

    user   User   @relation(fields: [userId], references: [id])
    userId String @map("user_id")
}

model Post {
    id        String   @id @default(cuid())
    body      String
    title     String
    author    String
    ref       String?
    tags      String[]
    likes     String[] @default([])
    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    @@map(name: "posts")
}

model Reward {
    hash   String @id @default(uuid())
    item   String
    type   String
    points Int

    issuedAt  DateTime @default(now())
    expiresAt DateTime

    User      User   @relation(fields: [recipient], references: [id])
    recipient String
}

model Offer {
    id       String @id @default(cuid())
    code     String @default(cuid())
    benefits String
    points   Int

    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    redeemedBy User[]
}

// Model `Account` required for next-auth
model Account {
    id                 String  @id @default(cuid())
    userId             String  @map("user_id")
    type               String
    provider           String
    providerAccountId  String  @map("provider_account_id")
    refresh_token      String?
    access_token       String?
    expires_at         Int?
    token_type         String?
    scope              String?
    id_token           String?
    session_state      String?
    oauth_token_secret String?
    oauth_token        String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

// Model `Session` required for next-auth
model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verificationtokens")
}
